//CHECKSUM:0c2754f1743f74a8fbd5f76b14f41fd1bdb6f36e3cdbb1636499f43e713be7fd
"use strict";

/**
 * Extract entities that match a slot
 * @hidden true
 * @param slotName The name of the slot to extract. (e.g. destination_from)
 * @param entitiesName The entities of the slot. (e.g. City)
 */
const slotFill = async (slotName, entitiesName) => {
  const entities = entitiesName.split(',');

  if (entities && entities.length && event.nlu.entities && event.nlu.entities.length) {
    for (const entity of event.nlu.entities) {
      if (entities.includes(entity.name)) {
        setSlot(slotName, entity);
      }
    }
  } else if (entities && entities.includes('any')) {
    const value = event.payload.text || event.preview;
    setSlot(slotName, {
      name: 'any',
      type: 'any',
      meta: {
        start: 0,
        end: value.length
      },
      data: {
        extras: {},
        value: value
      }
    });
  }
};

const setSlot = (slotName, entity) => {
  if (!session.extractedSlots[slotName]) {
    session.extractedSlots[slotName] = {
      name: slotName,
      value: entity.data.value,
      entity: entity,
      timestamp: Date.now(),
      turns: 0,
      overwritable: true,
      expiresAfterTurns: false // BETA(11.8.4): Set this to a number to expire the slot after 'N' turns

    };
    session.extractedSlots.notFound = 0;
  }
};

return slotFill(args.slotName, args.entities);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNsb3RfZmlsbC5qcyJdLCJuYW1lcyI6WyJzbG90RmlsbCIsInNsb3ROYW1lIiwiZW50aXRpZXNOYW1lIiwiZW50aXRpZXMiLCJzcGxpdCIsImxlbmd0aCIsImV2ZW50Iiwibmx1IiwiZW50aXR5IiwiaW5jbHVkZXMiLCJuYW1lIiwic2V0U2xvdCIsInZhbHVlIiwicGF5bG9hZCIsInRleHQiLCJwcmV2aWV3IiwidHlwZSIsIm1ldGEiLCJzdGFydCIsImVuZCIsImRhdGEiLCJleHRyYXMiLCJzZXNzaW9uIiwiZXh0cmFjdGVkU2xvdHMiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwidHVybnMiLCJvdmVyd3JpdGFibGUiLCJleHBpcmVzQWZ0ZXJUdXJucyIsIm5vdEZvdW5kIiwiYXJncyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0FBTUEsTUFBTUEsUUFBUSxHQUFHLE9BQU9DLFFBQVAsRUFBaUJDLFlBQWpCLEtBQWtDO0FBQ2pELFFBQU1DLFFBQVEsR0FBR0QsWUFBWSxDQUFDRSxLQUFiLENBQW1CLEdBQW5CLENBQWpCOztBQUNBLE1BQUlELFFBQVEsSUFBSUEsUUFBUSxDQUFDRSxNQUFyQixJQUErQkMsS0FBSyxDQUFDQyxHQUFOLENBQVVKLFFBQXpDLElBQXFERyxLQUFLLENBQUNDLEdBQU4sQ0FBVUosUUFBVixDQUFtQkUsTUFBNUUsRUFBb0Y7QUFDbEYsU0FBSyxNQUFNRyxNQUFYLElBQXFCRixLQUFLLENBQUNDLEdBQU4sQ0FBVUosUUFBL0IsRUFBeUM7QUFDdkMsVUFBSUEsUUFBUSxDQUFDTSxRQUFULENBQWtCRCxNQUFNLENBQUNFLElBQXpCLENBQUosRUFBb0M7QUFDbENDLFFBQUFBLE9BQU8sQ0FBQ1YsUUFBRCxFQUFXTyxNQUFYLENBQVA7QUFDRDtBQUNGO0FBQ0YsR0FORCxNQU1PLElBQUlMLFFBQVEsSUFBSUEsUUFBUSxDQUFDTSxRQUFULENBQWtCLEtBQWxCLENBQWhCLEVBQTBDO0FBQy9DLFVBQU1HLEtBQUssR0FBR04sS0FBSyxDQUFDTyxPQUFOLENBQWNDLElBQWQsSUFBc0JSLEtBQUssQ0FBQ1MsT0FBMUM7QUFDQUosSUFBQUEsT0FBTyxDQUFDVixRQUFELEVBQVc7QUFDaEJTLE1BQUFBLElBQUksRUFBRSxLQURVO0FBRWhCTSxNQUFBQSxJQUFJLEVBQUUsS0FGVTtBQUdoQkMsTUFBQUEsSUFBSSxFQUFFO0FBQUVDLFFBQUFBLEtBQUssRUFBRSxDQUFUO0FBQVlDLFFBQUFBLEdBQUcsRUFBRVAsS0FBSyxDQUFDUDtBQUF2QixPQUhVO0FBSWhCZSxNQUFBQSxJQUFJLEVBQUU7QUFBRUMsUUFBQUEsTUFBTSxFQUFFLEVBQVY7QUFBY1QsUUFBQUEsS0FBSyxFQUFFQTtBQUFyQjtBQUpVLEtBQVgsQ0FBUDtBQU1EO0FBQ0YsQ0FqQkQ7O0FBbUJBLE1BQU1ELE9BQU8sR0FBRyxDQUFDVixRQUFELEVBQVdPLE1BQVgsS0FBc0I7QUFDcEMsTUFBSSxDQUFDYyxPQUFPLENBQUNDLGNBQVIsQ0FBdUJ0QixRQUF2QixDQUFMLEVBQXVDO0FBQ3JDcUIsSUFBQUEsT0FBTyxDQUFDQyxjQUFSLENBQXVCdEIsUUFBdkIsSUFBbUM7QUFDakNTLE1BQUFBLElBQUksRUFBRVQsUUFEMkI7QUFFakNXLE1BQUFBLEtBQUssRUFBRUosTUFBTSxDQUFDWSxJQUFQLENBQVlSLEtBRmM7QUFHakNKLE1BQUFBLE1BQU0sRUFBRUEsTUFIeUI7QUFJakNnQixNQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQUpzQjtBQUtqQ0MsTUFBQUEsS0FBSyxFQUFFLENBTDBCO0FBTWpDQyxNQUFBQSxZQUFZLEVBQUUsSUFObUI7QUFPakNDLE1BQUFBLGlCQUFpQixFQUFFLEtBUGMsQ0FPUjs7QUFQUSxLQUFuQztBQVNBUCxJQUFBQSxPQUFPLENBQUNDLGNBQVIsQ0FBdUJPLFFBQXZCLEdBQWtDLENBQWxDO0FBQ0Q7QUFDRixDQWJEOztBQWVBLE9BQU85QixRQUFRLENBQUMrQixJQUFJLENBQUM5QixRQUFOLEVBQWdCOEIsSUFBSSxDQUFDNUIsUUFBckIsQ0FBZiIsInNvdXJjZVJvb3QiOiIvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9idWlsZC13aW5kb3dzL21vZHVsZXMvYmFzaWMtc2tpbGxzL3NyYy9iYWNrZW5kIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRyYWN0IGVudGl0aWVzIHRoYXQgbWF0Y2ggYSBzbG90XG4gKiBAaGlkZGVuIHRydWVcbiAqIEBwYXJhbSBzbG90TmFtZSBUaGUgbmFtZSBvZiB0aGUgc2xvdCB0byBleHRyYWN0LiAoZS5nLiBkZXN0aW5hdGlvbl9mcm9tKVxuICogQHBhcmFtIGVudGl0aWVzTmFtZSBUaGUgZW50aXRpZXMgb2YgdGhlIHNsb3QuIChlLmcuIENpdHkpXG4gKi9cbmNvbnN0IHNsb3RGaWxsID0gYXN5bmMgKHNsb3ROYW1lLCBlbnRpdGllc05hbWUpID0+IHtcbiAgY29uc3QgZW50aXRpZXMgPSBlbnRpdGllc05hbWUuc3BsaXQoJywnKVxuICBpZiAoZW50aXRpZXMgJiYgZW50aXRpZXMubGVuZ3RoICYmIGV2ZW50Lm5sdS5lbnRpdGllcyAmJiBldmVudC5ubHUuZW50aXRpZXMubGVuZ3RoKSB7XG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgZXZlbnQubmx1LmVudGl0aWVzKSB7XG4gICAgICBpZiAoZW50aXRpZXMuaW5jbHVkZXMoZW50aXR5Lm5hbWUpKSB7XG4gICAgICAgIHNldFNsb3Qoc2xvdE5hbWUsIGVudGl0eSlcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZW50aXRpZXMgJiYgZW50aXRpZXMuaW5jbHVkZXMoJ2FueScpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBldmVudC5wYXlsb2FkLnRleHQgfHwgZXZlbnQucHJldmlld1xuICAgIHNldFNsb3Qoc2xvdE5hbWUsIHtcbiAgICAgIG5hbWU6ICdhbnknLFxuICAgICAgdHlwZTogJ2FueScsXG4gICAgICBtZXRhOiB7IHN0YXJ0OiAwLCBlbmQ6IHZhbHVlLmxlbmd0aCB9LFxuICAgICAgZGF0YTogeyBleHRyYXM6IHt9LCB2YWx1ZTogdmFsdWUgfVxuICAgIH0pXG4gIH1cbn1cblxuY29uc3Qgc2V0U2xvdCA9IChzbG90TmFtZSwgZW50aXR5KSA9PiB7XG4gIGlmICghc2Vzc2lvbi5leHRyYWN0ZWRTbG90c1tzbG90TmFtZV0pIHtcbiAgICBzZXNzaW9uLmV4dHJhY3RlZFNsb3RzW3Nsb3ROYW1lXSA9IHtcbiAgICAgIG5hbWU6IHNsb3ROYW1lLFxuICAgICAgdmFsdWU6IGVudGl0eS5kYXRhLnZhbHVlLFxuICAgICAgZW50aXR5OiBlbnRpdHksXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICB0dXJuczogMCxcbiAgICAgIG92ZXJ3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGV4cGlyZXNBZnRlclR1cm5zOiBmYWxzZSAvLyBCRVRBKDExLjguNCk6IFNldCB0aGlzIHRvIGEgbnVtYmVyIHRvIGV4cGlyZSB0aGUgc2xvdCBhZnRlciAnTicgdHVybnNcbiAgICB9XG4gICAgc2Vzc2lvbi5leHRyYWN0ZWRTbG90cy5ub3RGb3VuZCA9IDBcbiAgfVxufVxuXG5yZXR1cm4gc2xvdEZpbGwoYXJncy5zbG90TmFtZSwgYXJncy5lbnRpdGllcylcbiJdfQ==