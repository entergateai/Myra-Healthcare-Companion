//CHECKSUM:fc3d77ddd3901faec71d3106f5d45d4f5e846a78d8b2a9143c3c3a95855ed8b2
"use strict";

const axios = require('axios');
/**
 * @hidden true
 */


const callApi = async (url, method, body, memory, variable, headers) => {
  // Use context to flatten event object
  const context = {
    event,
    user: event.state.user,
    temp: event.state.temp,
    session: event.state.session
  };
  const renderedHeaders = bp.cms.renderTemplate(headers, context);
  const renderedBody = bp.cms.renderTemplate(body, context);

  try {
    const response = await axios({
      method,
      url,
      headers: renderedHeaders,
      data: renderedBody
    });
    event.state[memory][variable] = {
      body: response.data,
      status: response.status
    };
    event.state.temp.valid = true;
  } catch (error) {
    const errorCode = error.response && error.response.status || error.code || '';
    bp.logger.error(`Error: ${errorCode} while calling resource "${url}"`);
    event.state[memory][variable] = {
      status: errorCode
    };
    event.state.temp.valid = false;
  }
};

return callApi(args.url, args.method, args.body, args.memory, args.variable, args.headers);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbGxfYXBpLmpzIl0sIm5hbWVzIjpbImF4aW9zIiwicmVxdWlyZSIsImNhbGxBcGkiLCJ1cmwiLCJtZXRob2QiLCJib2R5IiwibWVtb3J5IiwidmFyaWFibGUiLCJoZWFkZXJzIiwiY29udGV4dCIsImV2ZW50IiwidXNlciIsInN0YXRlIiwidGVtcCIsInNlc3Npb24iLCJyZW5kZXJlZEhlYWRlcnMiLCJicCIsImNtcyIsInJlbmRlclRlbXBsYXRlIiwicmVuZGVyZWRCb2R5IiwicmVzcG9uc2UiLCJkYXRhIiwic3RhdHVzIiwidmFsaWQiLCJlcnJvciIsImVycm9yQ29kZSIsImNvZGUiLCJsb2dnZXIiLCJhcmdzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7QUFDQTs7Ozs7QUFJQSxNQUFNQyxPQUFPLEdBQUcsT0FBT0MsR0FBUCxFQUFZQyxNQUFaLEVBQW9CQyxJQUFwQixFQUEwQkMsTUFBMUIsRUFBa0NDLFFBQWxDLEVBQTRDQyxPQUE1QyxLQUF3RDtBQUN0RTtBQUNBLFFBQU1DLE9BQU8sR0FBRztBQUNkQyxJQUFBQSxLQURjO0FBRWRDLElBQUFBLElBQUksRUFBRUQsS0FBSyxDQUFDRSxLQUFOLENBQVlELElBRko7QUFHZEUsSUFBQUEsSUFBSSxFQUFFSCxLQUFLLENBQUNFLEtBQU4sQ0FBWUMsSUFISjtBQUlkQyxJQUFBQSxPQUFPLEVBQUVKLEtBQUssQ0FBQ0UsS0FBTixDQUFZRTtBQUpQLEdBQWhCO0FBTUEsUUFBTUMsZUFBZSxHQUFHQyxFQUFFLENBQUNDLEdBQUgsQ0FBT0MsY0FBUCxDQUFzQlYsT0FBdEIsRUFBK0JDLE9BQS9CLENBQXhCO0FBQ0EsUUFBTVUsWUFBWSxHQUFHSCxFQUFFLENBQUNDLEdBQUgsQ0FBT0MsY0FBUCxDQUFzQmIsSUFBdEIsRUFBNEJJLE9BQTVCLENBQXJCOztBQUVBLE1BQUk7QUFDRixVQUFNVyxRQUFRLEdBQUcsTUFBTXBCLEtBQUssQ0FBQztBQUMzQkksTUFBQUEsTUFEMkI7QUFFM0JELE1BQUFBLEdBRjJCO0FBRzNCSyxNQUFBQSxPQUFPLEVBQUVPLGVBSGtCO0FBSTNCTSxNQUFBQSxJQUFJLEVBQUVGO0FBSnFCLEtBQUQsQ0FBNUI7QUFPQVQsSUFBQUEsS0FBSyxDQUFDRSxLQUFOLENBQVlOLE1BQVosRUFBb0JDLFFBQXBCLElBQWdDO0FBQUVGLE1BQUFBLElBQUksRUFBRWUsUUFBUSxDQUFDQyxJQUFqQjtBQUF1QkMsTUFBQUEsTUFBTSxFQUFFRixRQUFRLENBQUNFO0FBQXhDLEtBQWhDO0FBQ0FaLElBQUFBLEtBQUssQ0FBQ0UsS0FBTixDQUFZQyxJQUFaLENBQWlCVSxLQUFqQixHQUF5QixJQUF6QjtBQUNELEdBVkQsQ0FVRSxPQUFPQyxLQUFQLEVBQWM7QUFDZCxVQUFNQyxTQUFTLEdBQUlELEtBQUssQ0FBQ0osUUFBTixJQUFrQkksS0FBSyxDQUFDSixRQUFOLENBQWVFLE1BQWxDLElBQTZDRSxLQUFLLENBQUNFLElBQW5ELElBQTJELEVBQTdFO0FBQ0FWLElBQUFBLEVBQUUsQ0FBQ1csTUFBSCxDQUFVSCxLQUFWLENBQWlCLFVBQVNDLFNBQVUsNEJBQTJCdEIsR0FBSSxHQUFuRTtBQUVBTyxJQUFBQSxLQUFLLENBQUNFLEtBQU4sQ0FBWU4sTUFBWixFQUFvQkMsUUFBcEIsSUFBZ0M7QUFBRWUsTUFBQUEsTUFBTSxFQUFFRztBQUFWLEtBQWhDO0FBQ0FmLElBQUFBLEtBQUssQ0FBQ0UsS0FBTixDQUFZQyxJQUFaLENBQWlCVSxLQUFqQixHQUF5QixLQUF6QjtBQUNEO0FBQ0YsQ0E1QkQ7O0FBOEJBLE9BQU9yQixPQUFPLENBQUMwQixJQUFJLENBQUN6QixHQUFOLEVBQVd5QixJQUFJLENBQUN4QixNQUFoQixFQUF3QndCLElBQUksQ0FBQ3ZCLElBQTdCLEVBQW1DdUIsSUFBSSxDQUFDdEIsTUFBeEMsRUFBZ0RzQixJQUFJLENBQUNyQixRQUFyRCxFQUErRHFCLElBQUksQ0FBQ3BCLE9BQXBFLENBQWQiLCJzb3VyY2VSb290IjoiL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYnVpbGQtd2luZG93cy9tb2R1bGVzL2Jhc2ljLXNraWxscy9zcmMvYmFja2VuZCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKVxuLyoqXG4gKiBAaGlkZGVuIHRydWVcbiAqL1xuXG5jb25zdCBjYWxsQXBpID0gYXN5bmMgKHVybCwgbWV0aG9kLCBib2R5LCBtZW1vcnksIHZhcmlhYmxlLCBoZWFkZXJzKSA9PiB7XG4gIC8vIFVzZSBjb250ZXh0IHRvIGZsYXR0ZW4gZXZlbnQgb2JqZWN0XG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgZXZlbnQsXG4gICAgdXNlcjogZXZlbnQuc3RhdGUudXNlcixcbiAgICB0ZW1wOiBldmVudC5zdGF0ZS50ZW1wLFxuICAgIHNlc3Npb246IGV2ZW50LnN0YXRlLnNlc3Npb25cbiAgfVxuICBjb25zdCByZW5kZXJlZEhlYWRlcnMgPSBicC5jbXMucmVuZGVyVGVtcGxhdGUoaGVhZGVycywgY29udGV4dClcbiAgY29uc3QgcmVuZGVyZWRCb2R5ID0gYnAuY21zLnJlbmRlclRlbXBsYXRlKGJvZHksIGNvbnRleHQpXG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zKHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGhlYWRlcnM6IHJlbmRlcmVkSGVhZGVycyxcbiAgICAgIGRhdGE6IHJlbmRlcmVkQm9keVxuICAgIH0pXG5cbiAgICBldmVudC5zdGF0ZVttZW1vcnldW3ZhcmlhYmxlXSA9IHsgYm9keTogcmVzcG9uc2UuZGF0YSwgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMgfVxuICAgIGV2ZW50LnN0YXRlLnRlbXAudmFsaWQgPSB0cnVlXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3QgZXJyb3JDb2RlID0gKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cykgfHwgZXJyb3IuY29kZSB8fCAnJ1xuICAgIGJwLmxvZ2dlci5lcnJvcihgRXJyb3I6ICR7ZXJyb3JDb2RlfSB3aGlsZSBjYWxsaW5nIHJlc291cmNlIFwiJHt1cmx9XCJgKVxuXG4gICAgZXZlbnQuc3RhdGVbbWVtb3J5XVt2YXJpYWJsZV0gPSB7IHN0YXR1czogZXJyb3JDb2RlIH1cbiAgICBldmVudC5zdGF0ZS50ZW1wLnZhbGlkID0gZmFsc2VcbiAgfVxufVxuXG5yZXR1cm4gY2FsbEFwaShhcmdzLnVybCwgYXJncy5tZXRob2QsIGFyZ3MuYm9keSwgYXJncy5tZW1vcnksIGFyZ3MudmFyaWFibGUsIGFyZ3MuaGVhZGVycylcbiJdfQ==