//CHECKSUM:bc5366172815e9791d43dece18edabe63475a5ed049c3a28feb68048f369b274
"use strict";

const _ = require('lodash');
/**
 * Appends the provided context(s) to the list of contexts that will be used by the NLU Engine
 * for the next messages for that chat session.
 *
 * The TTL (Time-To-Live) represents how long the contexts will be valid before they are automatically removed.
 * For example, the default value of `1` will listen for that context only once (the next time the user speaks).
 *
 * If a context was already present in the list, the higher TTL will win.
 * To force override a specific context, use the `removeContext` action before this action.
 *
 * This method is contextual to the current user and chat session.
 *
 * You can specify more than one context by separating them with a comma.
 *
 * @title Append Context
 * @category NLU
 * @author Botpress, Inc.
 * @param {string} contexts - Comma-separated list of contexts
 * @param {string} [ttl=1] - Time-To-Live of the context in number of dialog turns. Put `0` to disable expiry.
 */


const appendContext = (contexts, ttl) => {
  const existing = event.state.session.nluContexts || [];
  const add = contexts.trim().split(',');
  const merged = [...existing, ...add.map(x => ({
    context: x,
    ttl: isNaN(Number(ttl)) ? 1000 : Number(ttl)
  }))];
  const final = [];
  const visited = {};

  for (const ctx of merged) {
    if (visited[ctx.context]) {
      continue;
    }

    final.push(_.chain(merged).filter(x => x.context === ctx.context).orderBy('ttl', 'desc').first().value());
    visited[ctx.context] = true;
  }

  event.state.session.nluContexts = final;
};

return appendContext(args.contexts, args.ttl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcGVuZENvbnRleHQuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJhcHBlbmRDb250ZXh0IiwiY29udGV4dHMiLCJ0dGwiLCJleGlzdGluZyIsImV2ZW50Iiwic3RhdGUiLCJzZXNzaW9uIiwibmx1Q29udGV4dHMiLCJhZGQiLCJ0cmltIiwic3BsaXQiLCJtZXJnZWQiLCJtYXAiLCJ4IiwiY29udGV4dCIsImlzTmFOIiwiTnVtYmVyIiwiZmluYWwiLCJ2aXNpdGVkIiwiY3R4IiwicHVzaCIsImNoYWluIiwiZmlsdGVyIiwib3JkZXJCeSIsImZpcnN0IiwidmFsdWUiLCJhcmdzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBakI7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQSxNQUFNQyxhQUFhLEdBQUcsQ0FBQ0MsUUFBRCxFQUFXQyxHQUFYLEtBQW1CO0FBQ3ZDLFFBQU1DLFFBQVEsR0FBR0MsS0FBSyxDQUFDQyxLQUFOLENBQVlDLE9BQVosQ0FBb0JDLFdBQXBCLElBQW1DLEVBQXBEO0FBQ0EsUUFBTUMsR0FBRyxHQUFHUCxRQUFRLENBQUNRLElBQVQsR0FBZ0JDLEtBQWhCLENBQXNCLEdBQXRCLENBQVo7QUFDQSxRQUFNQyxNQUFNLEdBQUcsQ0FDYixHQUFHUixRQURVLEVBRWIsR0FBR0ssR0FBRyxDQUFDSSxHQUFKLENBQVFDLENBQUMsS0FBSztBQUNmQyxJQUFBQSxPQUFPLEVBQUVELENBRE07QUFFZlgsSUFBQUEsR0FBRyxFQUFFYSxLQUFLLENBQUNDLE1BQU0sQ0FBQ2QsR0FBRCxDQUFQLENBQUwsR0FBcUIsSUFBckIsR0FBNEJjLE1BQU0sQ0FBQ2QsR0FBRDtBQUZ4QixHQUFMLENBQVQsQ0FGVSxDQUFmO0FBUUEsUUFBTWUsS0FBSyxHQUFHLEVBQWQ7QUFDQSxRQUFNQyxPQUFPLEdBQUcsRUFBaEI7O0FBQ0EsT0FBSyxNQUFNQyxHQUFYLElBQWtCUixNQUFsQixFQUEwQjtBQUN4QixRQUFJTyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0wsT0FBTCxDQUFYLEVBQTBCO0FBQ3hCO0FBQ0Q7O0FBQ0RHLElBQUFBLEtBQUssQ0FBQ0csSUFBTixDQUNFdEIsQ0FBQyxDQUFDdUIsS0FBRixDQUFRVixNQUFSLEVBQ0dXLE1BREgsQ0FDVVQsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLE9BQUYsS0FBY0ssR0FBRyxDQUFDTCxPQURqQyxFQUVHUyxPQUZILENBRVcsS0FGWCxFQUVrQixNQUZsQixFQUdHQyxLQUhILEdBSUdDLEtBSkgsRUFERjtBQU9BUCxJQUFBQSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0wsT0FBTCxDQUFQLEdBQXVCLElBQXZCO0FBQ0Q7O0FBRURWLEVBQUFBLEtBQUssQ0FBQ0MsS0FBTixDQUFZQyxPQUFaLENBQW9CQyxXQUFwQixHQUFrQ1UsS0FBbEM7QUFDRCxDQTVCRDs7QUE4QkEsT0FBT2pCLGFBQWEsQ0FBQzBCLElBQUksQ0FBQ3pCLFFBQU4sRUFBZ0J5QixJQUFJLENBQUN4QixHQUFyQixDQUFwQiIsInNvdXJjZVJvb3QiOiIvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9idWlsZC13aW5kb3dzL21vZHVsZXMvYnVpbHRpbi9zcmMvYmFja2VuZCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuXG4vKipcbiAqIEFwcGVuZHMgdGhlIHByb3ZpZGVkIGNvbnRleHQocykgdG8gdGhlIGxpc3Qgb2YgY29udGV4dHMgdGhhdCB3aWxsIGJlIHVzZWQgYnkgdGhlIE5MVSBFbmdpbmVcbiAqIGZvciB0aGUgbmV4dCBtZXNzYWdlcyBmb3IgdGhhdCBjaGF0IHNlc3Npb24uXG4gKlxuICogVGhlIFRUTCAoVGltZS1Uby1MaXZlKSByZXByZXNlbnRzIGhvdyBsb25nIHRoZSBjb250ZXh0cyB3aWxsIGJlIHZhbGlkIGJlZm9yZSB0aGV5IGFyZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXG4gKiBGb3IgZXhhbXBsZSwgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYDFgIHdpbGwgbGlzdGVuIGZvciB0aGF0IGNvbnRleHQgb25seSBvbmNlICh0aGUgbmV4dCB0aW1lIHRoZSB1c2VyIHNwZWFrcykuXG4gKlxuICogSWYgYSBjb250ZXh0IHdhcyBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIGxpc3QsIHRoZSBoaWdoZXIgVFRMIHdpbGwgd2luLlxuICogVG8gZm9yY2Ugb3ZlcnJpZGUgYSBzcGVjaWZpYyBjb250ZXh0LCB1c2UgdGhlIGByZW1vdmVDb250ZXh0YCBhY3Rpb24gYmVmb3JlIHRoaXMgYWN0aW9uLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGNvbnRleHR1YWwgdG8gdGhlIGN1cnJlbnQgdXNlciBhbmQgY2hhdCBzZXNzaW9uLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBtb3JlIHRoYW4gb25lIGNvbnRleHQgYnkgc2VwYXJhdGluZyB0aGVtIHdpdGggYSBjb21tYS5cbiAqXG4gKiBAdGl0bGUgQXBwZW5kIENvbnRleHRcbiAqIEBjYXRlZ29yeSBOTFVcbiAqIEBhdXRob3IgQm90cHJlc3MsIEluYy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0cyAtIENvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGNvbnRleHRzXG4gKiBAcGFyYW0ge3N0cmluZ30gW3R0bD0xXSAtIFRpbWUtVG8tTGl2ZSBvZiB0aGUgY29udGV4dCBpbiBudW1iZXIgb2YgZGlhbG9nIHR1cm5zLiBQdXQgYDBgIHRvIGRpc2FibGUgZXhwaXJ5LlxuICovXG5jb25zdCBhcHBlbmRDb250ZXh0ID0gKGNvbnRleHRzLCB0dGwpID0+IHtcbiAgY29uc3QgZXhpc3RpbmcgPSBldmVudC5zdGF0ZS5zZXNzaW9uLm5sdUNvbnRleHRzIHx8IFtdXG4gIGNvbnN0IGFkZCA9IGNvbnRleHRzLnRyaW0oKS5zcGxpdCgnLCcpXG4gIGNvbnN0IG1lcmdlZCA9IFtcbiAgICAuLi5leGlzdGluZyxcbiAgICAuLi5hZGQubWFwKHggPT4gKHtcbiAgICAgIGNvbnRleHQ6IHgsXG4gICAgICB0dGw6IGlzTmFOKE51bWJlcih0dGwpKSA/IDEwMDAgOiBOdW1iZXIodHRsKVxuICAgIH0pKVxuICBdXG5cbiAgY29uc3QgZmluYWwgPSBbXVxuICBjb25zdCB2aXNpdGVkID0ge31cbiAgZm9yIChjb25zdCBjdHggb2YgbWVyZ2VkKSB7XG4gICAgaWYgKHZpc2l0ZWRbY3R4LmNvbnRleHRdKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBmaW5hbC5wdXNoKFxuICAgICAgXy5jaGFpbihtZXJnZWQpXG4gICAgICAgIC5maWx0ZXIoeCA9PiB4LmNvbnRleHQgPT09IGN0eC5jb250ZXh0KVxuICAgICAgICAub3JkZXJCeSgndHRsJywgJ2Rlc2MnKVxuICAgICAgICAuZmlyc3QoKVxuICAgICAgICAudmFsdWUoKVxuICAgIClcbiAgICB2aXNpdGVkW2N0eC5jb250ZXh0XSA9IHRydWVcbiAgfVxuXG4gIGV2ZW50LnN0YXRlLnNlc3Npb24ubmx1Q29udGV4dHMgPSBmaW5hbFxufVxuXG5yZXR1cm4gYXBwZW5kQ29udGV4dChhcmdzLmNvbnRleHRzLCBhcmdzLnR0bClcbiJdfQ==