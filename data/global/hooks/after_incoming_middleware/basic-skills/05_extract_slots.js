//CHECKSUM:ca901f203683263981b9ab4cb1ac3c3f970860663de60d5d9b5b2a891fec1bba
"use strict";

const _ = require('lodash'); // Make sure extractedSlots exists


event.state.session.extractedSlots = event.state.session.extractedSlots || {};
handleSlotsExpiry();
extractIntentSlots();

function extractIntentSlots() {
  const slots = _.flatten(_.values(event.nlu.slots)).filter(x => !!x.value); // only non-null slots


  for (let slot of slots) {
    // BETA(11.8.4): Prevent overwrite of the slot if explicitely demanded
    if (event.state.session.extractedSlots[slot.name] && event.state.session.extractedSlots[slot.name].overwritable == false) {
      continue;
    } // Slot is an array when the NLU is confused about the results
    // The array is sorted by confidence so we take the first index


    if (Array.isArray(slot)) {
      slot = slot[0];
    }

    event.state.session.extractedSlots.notFound = 0;
    event.setFlag(bp.IO.WellKnownFlags.FORCE_PERSIST_STATE, true);
    event.state.session.extractedSlots[slot.name] = { ...slot,
      timestamp: Date.now(),
      turns: 0,
      overwritable: true,
      expiresAfterTurns: false // BETA(11.8.4): Set this to a number to expire the slot after 'N' turns

    };
  }
}

function handleSlotsExpiry() {
  for (let slot of _.values(event.state.session.extractedSlots)) {
    if (typeof slot.turns === 'number') {
      ++slot.turns;
    } // BETA(11.8.4): Automatically expire the slot after X dialog turns


    if (typeof slot.expiresAfterTurns === 'number' && slot.turns >= slot.expiresAfterTurns) {
      delete event.state.session.extractedSlots[slot.name];
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjA1X2V4dHJhY3Rfc2xvdHMuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJldmVudCIsInN0YXRlIiwic2Vzc2lvbiIsImV4dHJhY3RlZFNsb3RzIiwiaGFuZGxlU2xvdHNFeHBpcnkiLCJleHRyYWN0SW50ZW50U2xvdHMiLCJzbG90cyIsImZsYXR0ZW4iLCJ2YWx1ZXMiLCJubHUiLCJmaWx0ZXIiLCJ4IiwidmFsdWUiLCJzbG90IiwibmFtZSIsIm92ZXJ3cml0YWJsZSIsIkFycmF5IiwiaXNBcnJheSIsIm5vdEZvdW5kIiwic2V0RmxhZyIsImJwIiwiSU8iLCJXZWxsS25vd25GbGFncyIsIkZPUkNFX1BFUlNJU1RfU1RBVEUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwidHVybnMiLCJleHBpcmVzQWZ0ZXJUdXJucyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQWpCLEMsQ0FFQTs7O0FBQ0FDLEtBQUssQ0FBQ0MsS0FBTixDQUFZQyxPQUFaLENBQW9CQyxjQUFwQixHQUFxQ0gsS0FBSyxDQUFDQyxLQUFOLENBQVlDLE9BQVosQ0FBb0JDLGNBQXBCLElBQXNDLEVBQTNFO0FBQ0FDLGlCQUFpQjtBQUNqQkMsa0JBQWtCOztBQUVsQixTQUFTQSxrQkFBVCxHQUE4QjtBQUM1QixRQUFNQyxLQUFLLEdBQUdSLENBQUMsQ0FBQ1MsT0FBRixDQUFVVCxDQUFDLENBQUNVLE1BQUYsQ0FBU1IsS0FBSyxDQUFDUyxHQUFOLENBQVVILEtBQW5CLENBQVYsRUFBcUNJLE1BQXJDLENBQTRDQyxDQUFDLElBQUksQ0FBQyxDQUFDQSxDQUFDLENBQUNDLEtBQXJELENBQWQsQ0FENEIsQ0FDOEM7OztBQUMxRSxPQUFLLElBQUlDLElBQVQsSUFBaUJQLEtBQWpCLEVBQXdCO0FBQ3RCO0FBQ0EsUUFDRU4sS0FBSyxDQUFDQyxLQUFOLENBQVlDLE9BQVosQ0FBb0JDLGNBQXBCLENBQW1DVSxJQUFJLENBQUNDLElBQXhDLEtBQ0FkLEtBQUssQ0FBQ0MsS0FBTixDQUFZQyxPQUFaLENBQW9CQyxjQUFwQixDQUFtQ1UsSUFBSSxDQUFDQyxJQUF4QyxFQUE4Q0MsWUFBOUMsSUFBOEQsS0FGaEUsRUFHRTtBQUNBO0FBQ0QsS0FQcUIsQ0FTdEI7QUFDQTs7O0FBQ0EsUUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNKLElBQWQsQ0FBSixFQUF5QjtBQUN2QkEsTUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUMsQ0FBRCxDQUFYO0FBQ0Q7O0FBRURiLElBQUFBLEtBQUssQ0FBQ0MsS0FBTixDQUFZQyxPQUFaLENBQW9CQyxjQUFwQixDQUFtQ2UsUUFBbkMsR0FBOEMsQ0FBOUM7QUFDQWxCLElBQUFBLEtBQUssQ0FBQ21CLE9BQU4sQ0FBY0MsRUFBRSxDQUFDQyxFQUFILENBQU1DLGNBQU4sQ0FBcUJDLG1CQUFuQyxFQUF3RCxJQUF4RDtBQUNBdkIsSUFBQUEsS0FBSyxDQUFDQyxLQUFOLENBQVlDLE9BQVosQ0FBb0JDLGNBQXBCLENBQW1DVSxJQUFJLENBQUNDLElBQXhDLElBQWdELEVBQzlDLEdBQUdELElBRDJDO0FBRTlDVyxNQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQUZtQztBQUc5Q0MsTUFBQUEsS0FBSyxFQUFFLENBSHVDO0FBSTlDWixNQUFBQSxZQUFZLEVBQUUsSUFKZ0M7QUFLOUNhLE1BQUFBLGlCQUFpQixFQUFFLEtBTDJCLENBS3JCOztBQUxxQixLQUFoRDtBQU9EO0FBQ0Y7O0FBRUQsU0FBU3hCLGlCQUFULEdBQTZCO0FBQzNCLE9BQUssSUFBSVMsSUFBVCxJQUFpQmYsQ0FBQyxDQUFDVSxNQUFGLENBQVNSLEtBQUssQ0FBQ0MsS0FBTixDQUFZQyxPQUFaLENBQW9CQyxjQUE3QixDQUFqQixFQUErRDtBQUM3RCxRQUFJLE9BQU9VLElBQUksQ0FBQ2MsS0FBWixLQUFzQixRQUExQixFQUFvQztBQUNsQyxRQUFFZCxJQUFJLENBQUNjLEtBQVA7QUFDRCxLQUg0RCxDQUs3RDs7O0FBQ0EsUUFBSSxPQUFPZCxJQUFJLENBQUNlLGlCQUFaLEtBQWtDLFFBQWxDLElBQThDZixJQUFJLENBQUNjLEtBQUwsSUFBY2QsSUFBSSxDQUFDZSxpQkFBckUsRUFBd0Y7QUFDdEYsYUFBTzVCLEtBQUssQ0FBQ0MsS0FBTixDQUFZQyxPQUFaLENBQW9CQyxjQUFwQixDQUFtQ1UsSUFBSSxDQUFDQyxJQUF4QyxDQUFQO0FBQ0Q7QUFDRjtBQUNGIiwic291cmNlUm9vdCI6Ii92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2J1aWxkLXdpbmRvd3MvbW9kdWxlcy9iYXNpYy1za2lsbHMvc3JjL2JhY2tlbmQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJylcblxuLy8gTWFrZSBzdXJlIGV4dHJhY3RlZFNsb3RzIGV4aXN0c1xuZXZlbnQuc3RhdGUuc2Vzc2lvbi5leHRyYWN0ZWRTbG90cyA9IGV2ZW50LnN0YXRlLnNlc3Npb24uZXh0cmFjdGVkU2xvdHMgfHwge31cbmhhbmRsZVNsb3RzRXhwaXJ5KClcbmV4dHJhY3RJbnRlbnRTbG90cygpXG5cbmZ1bmN0aW9uIGV4dHJhY3RJbnRlbnRTbG90cygpIHtcbiAgY29uc3Qgc2xvdHMgPSBfLmZsYXR0ZW4oXy52YWx1ZXMoZXZlbnQubmx1LnNsb3RzKSkuZmlsdGVyKHggPT4gISF4LnZhbHVlKSAvLyBvbmx5IG5vbi1udWxsIHNsb3RzXG4gIGZvciAobGV0IHNsb3Qgb2Ygc2xvdHMpIHtcbiAgICAvLyBCRVRBKDExLjguNCk6IFByZXZlbnQgb3ZlcndyaXRlIG9mIHRoZSBzbG90IGlmIGV4cGxpY2l0ZWx5IGRlbWFuZGVkXG4gICAgaWYgKFxuICAgICAgZXZlbnQuc3RhdGUuc2Vzc2lvbi5leHRyYWN0ZWRTbG90c1tzbG90Lm5hbWVdICYmXG4gICAgICBldmVudC5zdGF0ZS5zZXNzaW9uLmV4dHJhY3RlZFNsb3RzW3Nsb3QubmFtZV0ub3ZlcndyaXRhYmxlID09IGZhbHNlXG4gICAgKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIFNsb3QgaXMgYW4gYXJyYXkgd2hlbiB0aGUgTkxVIGlzIGNvbmZ1c2VkIGFib3V0IHRoZSByZXN1bHRzXG4gICAgLy8gVGhlIGFycmF5IGlzIHNvcnRlZCBieSBjb25maWRlbmNlIHNvIHdlIHRha2UgdGhlIGZpcnN0IGluZGV4XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHNsb3QgPSBzbG90WzBdXG4gICAgfVxuXG4gICAgZXZlbnQuc3RhdGUuc2Vzc2lvbi5leHRyYWN0ZWRTbG90cy5ub3RGb3VuZCA9IDBcbiAgICBldmVudC5zZXRGbGFnKGJwLklPLldlbGxLbm93bkZsYWdzLkZPUkNFX1BFUlNJU1RfU1RBVEUsIHRydWUpXG4gICAgZXZlbnQuc3RhdGUuc2Vzc2lvbi5leHRyYWN0ZWRTbG90c1tzbG90Lm5hbWVdID0ge1xuICAgICAgLi4uc2xvdCxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIHR1cm5zOiAwLFxuICAgICAgb3ZlcndyaXRhYmxlOiB0cnVlLFxuICAgICAgZXhwaXJlc0FmdGVyVHVybnM6IGZhbHNlIC8vIEJFVEEoMTEuOC40KTogU2V0IHRoaXMgdG8gYSBudW1iZXIgdG8gZXhwaXJlIHRoZSBzbG90IGFmdGVyICdOJyB0dXJuc1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVTbG90c0V4cGlyeSgpIHtcbiAgZm9yIChsZXQgc2xvdCBvZiBfLnZhbHVlcyhldmVudC5zdGF0ZS5zZXNzaW9uLmV4dHJhY3RlZFNsb3RzKSkge1xuICAgIGlmICh0eXBlb2Ygc2xvdC50dXJucyA9PT0gJ251bWJlcicpIHtcbiAgICAgICsrc2xvdC50dXJuc1xuICAgIH1cblxuICAgIC8vIEJFVEEoMTEuOC40KTogQXV0b21hdGljYWxseSBleHBpcmUgdGhlIHNsb3QgYWZ0ZXIgWCBkaWFsb2cgdHVybnNcbiAgICBpZiAodHlwZW9mIHNsb3QuZXhwaXJlc0FmdGVyVHVybnMgPT09ICdudW1iZXInICYmIHNsb3QudHVybnMgPj0gc2xvdC5leHBpcmVzQWZ0ZXJUdXJucykge1xuICAgICAgZGVsZXRlIGV2ZW50LnN0YXRlLnNlc3Npb24uZXh0cmFjdGVkU2xvdHNbc2xvdC5uYW1lXVxuICAgIH1cbiAgfVxufVxuIl19