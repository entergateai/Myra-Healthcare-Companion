//CHECKSUM:5d268a488ec5799e038aca72bc61ea3175319680cb6e6674a7733ff42ee84009
"use strict";

const messageTypesToDiscard = ['request_start_conversation', 'say_something', 'postback'];

if (messageTypesToDiscard.includes(event.type)) {
  event.setFlag(bp.IO.WellKnownFlags.SKIP_DIALOG_ENGINE, true);

  if (event.type === 'postback') {
    bp.logger.warn(`Just received a postback event: ${event.payload}. 
    To handle these kind of events. you need to create a hook that will process them.
    Please refer to the documentation here: https://botpress.io/docs/build/code/#hooks`);
  }
}

const saySomethingHook = async () => {
  const text = event.payload.text;

  if (event.type === 'say_something' && text && text.length) {
    if (text.startsWith('#!')) {
      /**
       * Sends an existing content element. Event is specified twice, since the first parameters are the
       * element arguments, and the second one is the event destination (required fields: botId, target, threadId, channel)
       */
      const content = await bp.cms.renderElement(text, event, event);
      await bp.events.replyToEvent(event, content);
    } else {
      // Sends a basic text message
      const payloads = await bp.cms.renderElement('builtin_text', {
        text,
        typing: true
      }, event.channel);
      await bp.events.replyToEvent(event, payloads);
    }
  }
};

return saySomethingHook();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAwX2RpYWxvZ19lbmdpbmUuanMiXSwibmFtZXMiOlsibWVzc2FnZVR5cGVzVG9EaXNjYXJkIiwiaW5jbHVkZXMiLCJldmVudCIsInR5cGUiLCJzZXRGbGFnIiwiYnAiLCJJTyIsIldlbGxLbm93bkZsYWdzIiwiU0tJUF9ESUFMT0dfRU5HSU5FIiwibG9nZ2VyIiwid2FybiIsInBheWxvYWQiLCJzYXlTb21ldGhpbmdIb29rIiwidGV4dCIsImxlbmd0aCIsInN0YXJ0c1dpdGgiLCJjb250ZW50IiwiY21zIiwicmVuZGVyRWxlbWVudCIsImV2ZW50cyIsInJlcGx5VG9FdmVudCIsInBheWxvYWRzIiwidHlwaW5nIiwiY2hhbm5lbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxxQkFBcUIsR0FBRyxDQUFDLDRCQUFELEVBQStCLGVBQS9CLEVBQWdELFVBQWhELENBQTlCOztBQUVBLElBQUlBLHFCQUFxQixDQUFDQyxRQUF0QixDQUErQkMsS0FBSyxDQUFDQyxJQUFyQyxDQUFKLEVBQWdEO0FBQzlDRCxFQUFBQSxLQUFLLENBQUNFLE9BQU4sQ0FBY0MsRUFBRSxDQUFDQyxFQUFILENBQU1DLGNBQU4sQ0FBcUJDLGtCQUFuQyxFQUF1RCxJQUF2RDs7QUFFQSxNQUFJTixLQUFLLENBQUNDLElBQU4sS0FBZSxVQUFuQixFQUErQjtBQUM3QkUsSUFBQUEsRUFBRSxDQUFDSSxNQUFILENBQVVDLElBQVYsQ0FBZ0IsbUNBQWtDUixLQUFLLENBQUNTLE9BQVE7O3VGQUFoRTtBQUdEO0FBQ0Y7O0FBRUQsTUFBTUMsZ0JBQWdCLEdBQUcsWUFBWTtBQUNuQyxRQUFNQyxJQUFJLEdBQUdYLEtBQUssQ0FBQ1MsT0FBTixDQUFjRSxJQUEzQjs7QUFFQSxNQUFJWCxLQUFLLENBQUNDLElBQU4sS0FBZSxlQUFmLElBQWtDVSxJQUFsQyxJQUEwQ0EsSUFBSSxDQUFDQyxNQUFuRCxFQUEyRDtBQUN6RCxRQUFJRCxJQUFJLENBQUNFLFVBQUwsQ0FBZ0IsSUFBaEIsQ0FBSixFQUEyQjtBQUN6Qjs7OztBQUlBLFlBQU1DLE9BQU8sR0FBRyxNQUFNWCxFQUFFLENBQUNZLEdBQUgsQ0FBT0MsYUFBUCxDQUFxQkwsSUFBckIsRUFBMkJYLEtBQTNCLEVBQWtDQSxLQUFsQyxDQUF0QjtBQUNBLFlBQU1HLEVBQUUsQ0FBQ2MsTUFBSCxDQUFVQyxZQUFWLENBQXVCbEIsS0FBdkIsRUFBOEJjLE9BQTlCLENBQU47QUFDRCxLQVBELE1BT087QUFDTDtBQUNBLFlBQU1LLFFBQVEsR0FBRyxNQUFNaEIsRUFBRSxDQUFDWSxHQUFILENBQU9DLGFBQVAsQ0FBcUIsY0FBckIsRUFBcUM7QUFBRUwsUUFBQUEsSUFBRjtBQUFRUyxRQUFBQSxNQUFNLEVBQUU7QUFBaEIsT0FBckMsRUFBNkRwQixLQUFLLENBQUNxQixPQUFuRSxDQUF2QjtBQUNBLFlBQU1sQixFQUFFLENBQUNjLE1BQUgsQ0FBVUMsWUFBVixDQUF1QmxCLEtBQXZCLEVBQThCbUIsUUFBOUIsQ0FBTjtBQUNEO0FBQ0Y7QUFDRixDQWpCRDs7QUFtQkEsT0FBT1QsZ0JBQWdCLEVBQXZCIiwic291cmNlUm9vdCI6Ii92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2J1aWxkLXdpbmRvd3MvbW9kdWxlcy9jaGFubmVsLXdlYi9zcmMvYmFja2VuZCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1lc3NhZ2VUeXBlc1RvRGlzY2FyZCA9IFsncmVxdWVzdF9zdGFydF9jb252ZXJzYXRpb24nLCAnc2F5X3NvbWV0aGluZycsICdwb3N0YmFjayddXG5cbmlmIChtZXNzYWdlVHlwZXNUb0Rpc2NhcmQuaW5jbHVkZXMoZXZlbnQudHlwZSkpIHtcbiAgZXZlbnQuc2V0RmxhZyhicC5JTy5XZWxsS25vd25GbGFncy5TS0lQX0RJQUxPR19FTkdJTkUsIHRydWUpXG5cbiAgaWYgKGV2ZW50LnR5cGUgPT09ICdwb3N0YmFjaycpIHtcbiAgICBicC5sb2dnZXIud2FybihgSnVzdCByZWNlaXZlZCBhIHBvc3RiYWNrIGV2ZW50OiAke2V2ZW50LnBheWxvYWR9LiBcbiAgICBUbyBoYW5kbGUgdGhlc2Uga2luZCBvZiBldmVudHMuIHlvdSBuZWVkIHRvIGNyZWF0ZSBhIGhvb2sgdGhhdCB3aWxsIHByb2Nlc3MgdGhlbS5cbiAgICBQbGVhc2UgcmVmZXIgdG8gdGhlIGRvY3VtZW50YXRpb24gaGVyZTogaHR0cHM6Ly9ib3RwcmVzcy5pby9kb2NzL2J1aWxkL2NvZGUvI2hvb2tzYClcbiAgfVxufVxuXG5jb25zdCBzYXlTb21ldGhpbmdIb29rID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCB0ZXh0ID0gZXZlbnQucGF5bG9hZC50ZXh0XG5cbiAgaWYgKGV2ZW50LnR5cGUgPT09ICdzYXlfc29tZXRoaW5nJyAmJiB0ZXh0ICYmIHRleHQubGVuZ3RoKSB7XG4gICAgaWYgKHRleHQuc3RhcnRzV2l0aCgnIyEnKSkge1xuICAgICAgLyoqXG4gICAgICAgKiBTZW5kcyBhbiBleGlzdGluZyBjb250ZW50IGVsZW1lbnQuIEV2ZW50IGlzIHNwZWNpZmllZCB0d2ljZSwgc2luY2UgdGhlIGZpcnN0IHBhcmFtZXRlcnMgYXJlIHRoZVxuICAgICAgICogZWxlbWVudCBhcmd1bWVudHMsIGFuZCB0aGUgc2Vjb25kIG9uZSBpcyB0aGUgZXZlbnQgZGVzdGluYXRpb24gKHJlcXVpcmVkIGZpZWxkczogYm90SWQsIHRhcmdldCwgdGhyZWFkSWQsIGNoYW5uZWwpXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBicC5jbXMucmVuZGVyRWxlbWVudCh0ZXh0LCBldmVudCwgZXZlbnQpXG4gICAgICBhd2FpdCBicC5ldmVudHMucmVwbHlUb0V2ZW50KGV2ZW50LCBjb250ZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZW5kcyBhIGJhc2ljIHRleHQgbWVzc2FnZVxuICAgICAgY29uc3QgcGF5bG9hZHMgPSBhd2FpdCBicC5jbXMucmVuZGVyRWxlbWVudCgnYnVpbHRpbl90ZXh0JywgeyB0ZXh0LCB0eXBpbmc6IHRydWUgfSwgZXZlbnQuY2hhbm5lbClcbiAgICAgIGF3YWl0IGJwLmV2ZW50cy5yZXBseVRvRXZlbnQoZXZlbnQsIHBheWxvYWRzKVxuICAgIH1cbiAgfVxufVxuXG5yZXR1cm4gc2F5U29tZXRoaW5nSG9vaygpXG4iXX0=